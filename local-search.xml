<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mac使用Hexo搭建个人博客</title>
    <link href="/2022/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhexo/"/>
    <url>/2022/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhexo/</url>
    
    <content type="html"><![CDATA[<h3 id="1安装必备资源"><a class="markdownIt-Anchor" href="#1安装必备资源"></a> 1.安装必备资源</h3><h4 id="11先安装nvm"><a class="markdownIt-Anchor" href="#11先安装nvm"></a> 1.1先安装nvm</h4><p>安装nvm而不是用<code>brew install node</code>的原因是因为nvm是<code>node version manager</code>,便于后续的版本控制</p><p>步骤如下：</p><ul><li><p>首先进入home目录：<code>cd ~</code></p></li><li><p>使用以下指令安装nvm：<code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash</code></p></li></ul><p>但是这里下载会出错，我先埋一个坑回头再解决</p><h4 id="12安装nodejs"><a class="markdownIt-Anchor" href="#12安装nodejs"></a> 1.2安装nodejs</h4><ul><li>访问网址:<a href="nodejs.org">nodejs</a></li><li>下载长期支持版LTS版本的nodejs，下载完成后不断同意，安装完后会发现npm这个包管理器也被装进去了</li></ul><blockquote><p>nvm控制nodejs的版本管理，nodejs内部有不同的插件与包，用npm管理</p></blockquote><ul><li>在终端检查：<code>node -v</code>、<code>nom-v</code>可以用来检查是否安装成功（后续检查版本指令类似）</li><li>打开mac终端进入到root用户：<code>suso su</code>后输入密码</li></ul><h4 id="13安装hexo框架"><a class="markdownIt-Anchor" href="#13安装hexo框架"></a> 1.3安装hexo框架</h4><ul><li><p>借助npm安装hexo，但是由于墙，用淘宝的镜像更快，所以先装cnpm</p><ul><li>输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>其中<code>-g</code>表示全局安装，后面–registry代表镜像源</li></ul></li><li><p>检验cnpm版本确认安装成功后，用cnpm安装hexo，命令为<code>cnpm install -g hexo-cli</code></p></li><li><p>检验hexo版本确认安装完成</p></li></ul><h3 id="2开始搭建博客"><a class="markdownIt-Anchor" href="#2开始搭建博客"></a> 2.开始搭建博客</h3><ul><li>首先pwd一下，确认位置，新建一个博客文件夹<code>mkdir dcode_blog</code></li><li>这时候在finder的dcode目录下就会发现有dcode_blog这个文件夹，cd进去</li><li>初始化一个博客<code>sudo hexo init</code>，等待一段时间后安装完成，可以发现在dcode_blog 的文件夹下多了一些文件，后续做博客基于这些文件</li><li>启动博客命令：<code>hexo s</code></li><li>访问localhost：4000端口，就可以看到本地的hexo网页了</li><li>hexo使用：<ul><li><strong>发布文章</strong>命令：<code>hexo n</code>+“标题名”，发布后文件保存在source/_posts/路径下，cd进去后ls即可发现</li><li>用vim之类改完文章后清理一下数据缓存：<code>hexo clean</code>；再生成一下：<code>hexo g</code></li><li>终止hexo的快捷键是Ctrl+C</li></ul></li></ul><h3 id="3把博客项目部署到github上"><a class="markdownIt-Anchor" href="#3把博客项目部署到github上"></a> 3.把博客项目部署到github上</h3><ul><li><p>首先新建仓库，命名必须是github名字+ <code>.github.io</code>,description随便写，我的是<em><a href="http://DongHaotian100.github.io">DongHaotian100.github.io</a></em></p></li><li><p>creat完成后，目前是空仓库，回到终端继续操作</p></li><li><p>要在dcode_blog文件下安装一个git部署的插件：<code>cnpm install --save hexo-deployer-git</code></p></li><li><p>对插件进行设置：</p><ul><li><p>用vim打开_config.yml文件进行修改，文件最下端找到Deployment进行配置</p></li><li><blockquote><p>type: git</p><p>repo:https://（这里填了token后hexo d时不用再输密码了，后面多加个@）@github.com/DongHaotian100/DongHaotian100.github.io.git</p><p>branch:master</p></blockquote></li><li><p>修改完上面的操作后先esc退出编辑模式，再输冒号：，再输入wq退出</p></li></ul></li><li><p>部署到远端<code>hexo d</code>,如果提示说不知我是谁，则配置git中的name与mail</p><ul><li><code>git config --global user.email</code></li><li><code>git config --global user.email</code></li></ul></li><li><p>但是事实上目前这种用账号密码确认的方式已经被git在2021年8月舍弃了，故应该使用令牌token代替密码</p><ul><li><p>设置勾选所有带repo的选项</p></li><li><blockquote><p>参考文档https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</p></blockquote></li></ul></li><li><p>目前token：ghp_GNW3Jqn1lBsy7hOIz5Fh****具体查看私人笔记</p></li></ul><h3 id="4更换hexo主题"><a class="markdownIt-Anchor" href="#4更换hexo主题"></a> 4.更换hexo主题</h3><h4 id="41下载主题"><a class="markdownIt-Anchor" href="#41下载主题"></a> 4.1下载主题</h4><p><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></p><h4 id="42修改配置文件"><a class="markdownIt-Anchor" href="#42修改配置文件"></a> 4.2修改配置文件</h4><ul><li>修改_config.yml，用vim打开</li><li>找到theme，更改主题名字为新主题名字</li></ul><h4 id="43fluid主题文档"><a class="markdownIt-Anchor" href="#43fluid主题文档"></a> 4.3Fluid主题文档</h4><p>官方链接：<code>https://hexo.fluid-dev.com/docs/guide/</code></p><p>注意几个更新点：</p><ul><li>主题配置：dcode_blog/source/_data中的yml文件</li><li>博客配置：dcode_blog/_config.fluid.yml文件</li><li>相比原生修改点：<ul><li>更换编辑器，以解析数学公式</li><li>首页的一些样式</li><li>about页面</li></ul></li></ul><h3 id="5配置域名"><a class="markdownIt-Anchor" href="#5配置域名"></a> 5.配置域名</h3><ul><li>首先购买域名，然后解析域名，进行配置</li><li>配置GitHub上的博客所在repository的setting里的pages</li></ul><blockquote><p>参考链接：<a href="https://budongshu.cn/2020/12/03/hexo">https://budongshu.cn/2020/12/03/hexo</a></p><p>参考文档：阿里云域名解析文档</p><p>参考视频：CodeSheep：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web">https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西瓜书 02章 模型评估与选择</title>
    <link href="/2022/01/11/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2022/01/11/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="21经验误差与过拟合"><a class="markdownIt-Anchor" href="#21经验误差与过拟合"></a> 2.1经验误差与过拟合</h2><ul><li><strong>经验误差</strong>即在学习训练集时对样本的误差</li><li><strong>过拟合</strong>，简而言之做过的题会得不得了，没做过的就不行，迁移能力差，因此在选择模型时要会评估模型，选择泛化能力好的</li></ul><h2 id="22评估方法"><a class="markdownIt-Anchor" href="#22评估方法"></a> 2.2评估方法</h2><h3 id="221留出法"><a class="markdownIt-Anchor" href="#221留出法"></a> 2.2.1留出法</h3><ul><li>即将数据集划分为互斥的训练集S与测试集T，推荐比例为S/T=4或者2</li><li>要注意抽取的数据尽可能在分布上接近原数据集</li></ul><h3 id="222交叉验证cross-validation"><a class="markdownIt-Anchor" href="#222交叉验证cross-validation"></a> 2.2.2交叉验证（Cross validation）</h3><ul><li><strong>n次n折交叉验证</strong>：即D划分n份，取其中n-1份用于训练，剩下一份用于测试，以此规则遍历n种分配方案即可</li><li><strong>留一法</strong>：即一份只有一个样本的n-n交叉验证，这种办法计算量大，几乎就是拿D在训练</li></ul><h3 id="223自助法bootstrap"><a class="markdownIt-Anchor" href="#223自助法bootstrap"></a> 2.2.3自助法（Bootstrap）</h3><ul><li><strong>原理</strong>：自助采样，有放回的采样m次得到训练集D‘，不被采集的数据占0.368</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>m</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><msup><mo stretchy="false">)</mo><mi>m</mi></msup><mo>=</mo><mfrac><mn>1</mn><mi>e</mi></mfrac><mo>≈</mo><mn>0.368</mn></mrow><annotation encoding="application/x-tex">\lim\limits_{m\to\infty}(1-\frac{1}m)^m=\frac{1}{e}\approx0.368</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">m</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">6</span><span class="mord">8</span></span></span></span></span></p><ul><li>数据集较小/难以有效划分训练集与测试集时比较适合自助法<ul><li>留出法缺点是训练规模不同导致估计偏差，留一法数据规模影响小，但是对于大规模数据计算量大，而当原数据的总体并不大时，自助法每次抽样能反应总体的特性，而在数据量大时，由于自助法会改变原数据分布，是有偏的估计，还是用其他方法比较合适</li></ul></li></ul><h3 id="224调参与最终模型"><a class="markdownIt-Anchor" href="#224调参与最终模型"></a> 2.2.4调参与最终模型</h3><ul><li><strong>调参</strong>：调节参数大小得到验证效果最好的模型，为了减少测试次数，参数调节可以设置步长</li><li><strong>最终模型</strong>：调参完成之前时会留一部分数据训练模型，这部分数据叫做验证集，而待调参数调好之后，用全集再训练一次模型，得到最终模型，最终模型再使用测试集进行测试</li></ul><h3 id="225性能度量"><a class="markdownIt-Anchor" href="#225性能度量"></a> 2.2.5性能度量</h3><blockquote><p>性能度量即评估学习器<em>f</em>的性能，方法是比较预测结果与真实标记的差距</p></blockquote><ul><li><p>错误率与精度：精度+错误率=1</p></li><li><p>P与R</p><ul><li><strong>查准率/准确率</strong>： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">P=\frac{TP}{TP+FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>  对应“选出来的瓜有多少好瓜”</li><li><strong>查全率/召回率</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">R = \frac{TP}{TP+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>  对应“好瓜中有多少被选出来了”</li><li>P与R一般是矛盾的，因为为了尽可能选瓜准确，一般挑瓜会比较谨慎，从而导致不少好瓜被漏掉，反之同理</li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mn>1</mn><mo>=</mo><mfrac><mrow><mn>2</mn><mo>×</mo><mi>P</mi><mo>×</mo><mi>R</mi></mrow><mrow><mi>P</mi><mo>+</mo><mi>R</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>2</mn><mo>×</mo><mrow><mi>T</mi><mi>P</mi></mrow></mrow><mrow><mi mathvariant="normal">样</mi><mi mathvariant="normal">例</mi><mi mathvariant="normal">总</mi><mi mathvariant="normal">数</mi><mo>+</mo><mi>T</mi><mi>P</mi><mo>−</mo><mi>T</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">F1=\frac{2\times{P}\times{R}}{P+R}=\frac{2\times{TP}}{样例总数+TP-TN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">样</span><span class="mord cjk_fallback mtight">例</span><span class="mord cjk_fallback mtight">总</span><span class="mord cjk_fallback mtight">数</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>  这个公式是P与R的调和平均数，另有根据业务对P、R重要性加权的调和平均，参考西瓜书P32</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吃瓜计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西瓜书 01章 绪论</title>
    <link href="/2022/01/11/%E7%BB%AA%E8%AE%BA/"/>
    <url>/2022/01/11/%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="11机器学习的总思路"><a class="markdownIt-Anchor" href="#11机器学习的总思路"></a> 1.1机器学习的总思路</h2><p><code>data -&gt; model -&gt; result</code></p><h2 id="12基本术语"><a class="markdownIt-Anchor" href="#12基本术语"></a> 1.2基本术语</h2><h3 id="121数据集"><a class="markdownIt-Anchor" href="#121数据集"></a> 1.2.1数据集</h3><ul><li>数据集（<em>Dataset</em>）由一条条记录组成，每条记录是一个示例，也等于一个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，具有i个特征维度，每个维度有j种取值</li><li>一个<em>Dataset</em>中有<em>m</em>个数据，即有<em>m</em>个记录，即有<em>m</em>个<em>i</em>维向量，即<em>Dataset</em>可以看作是一个矩阵</li><li>这样的数据集所处的样本空间大小是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>j</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">j^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></li><li>一般假设每个样本是独立同分布（<em>iid</em>）的</li></ul><h3 id="122训练集"><a class="markdownIt-Anchor" href="#122训练集"></a> 1.2.2训练集</h3><ul><li>从现有数据集中抽出一部分用于学习已有数据集的数据特征从而得到规律</li></ul><h3 id="123测试集"><a class="markdownIt-Anchor" href="#123测试集"></a> 1.2.3测试集</h3><ul><li>从现有数据集中抽出一部分用于检测训练得到规律的正确性</li><li>三个集合的关系<img src="https://s2.loli.net/2022/01/10/LCaU1nYwvuXZGO9.png" alt="image-20220110124052492" style="zoom:33%;" /></li></ul><h3 id="124机器学习分类"><a class="markdownIt-Anchor" href="#124机器学习分类"></a> 1.2.4机器学习分类</h3><ul><li>监督学习：有<em>Tag</em>的<em>Dataset</em>，如分类与回归</li><li>无监督学习：无<em>Tag</em>，如聚类</li><li>强化学习：在反馈的过程中不断根据环境调整学习，比如扫地机器人的路线选择、AlphaGo等</li></ul><h3 id="125泛化能力"><a class="markdownIt-Anchor" href="#125泛化能力"></a> 1.2.5泛化能力</h3><ul><li>可以理解为模型在新的陌生数据上的使用效果</li></ul><h3 id="126假设空间"><a class="markdownIt-Anchor" href="#126假设空间"></a> 1.2.6假设空间</h3><ul><li>归纳与演绎<ul><li>归纳：个性中找出共性，广义上大体相当于从样例中学习，狭义上指概念学习</li><li>演绎：把共性的规律应用在个性个体</li></ul></li><li>概念学习<ul><li>学习过程中是在假设空间中搜索的过程，目标是找到与训练集匹配的假设</li></ul></li><li>假设空间<ul><li>可以理解为数据可能出现的所有情况组合构成的空间</li></ul></li><li>版本空间<ul><li>在假设空间中取一个与训练集一致的子空间即为版本空间，这里的“一致”应当是说版本空间与训练集中的数据<strong>不矛盾</strong>，而非完全一一对应</li></ul></li></ul><h3 id="127归纳偏好"><a class="markdownIt-Anchor" href="#127归纳偏好"></a> 1.2.7归纳偏好</h3><ul><li><p>设置目的：为了确定哪种假设更好</p></li><li><p>设置原则：领域知识经验、奥卡姆剃刀原则（即选择最简单的）等</p></li><li><p>NFL(No Free Lunch)定理：在假设空间均匀分布时，算法无用</p><ul><li><blockquote><p>启示：机器学习要结合具体问题实现算法</p></blockquote></li></ul></li></ul><blockquote><p>本文总结于：《机器学习》第一章 by.周志华</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吃瓜计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础手册（2）</title>
    <link href="/2021/02/11/Basic_Python(2)/"/>
    <url>/2021/02/11/Basic_Python(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="basic_python2"><a class="markdownIt-Anchor" href="#basic_python2"></a> Basic_Python(2)</h1><blockquote><p>本文在Basic_Python(1)的基础之上介绍了一些python中的高级特性</p></blockquote><h2 id="1列表生成式"><a class="markdownIt-Anchor" href="#1列表生成式"></a> 1.列表生成式</h2><p>如果我想要创建一个list，我可以使用列表生成式</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#可以使用函数关系迭代生成</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">double</span>(<span class="hljs-params">i</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*i<br><span class="hljs-built_in">print</span>([double(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)])<br><span class="hljs-comment">#######################################</span><br>out：[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br>---------------------------------------<br><span class="hljs-comment">#也可以使用表达式迭代生成</span><br>[<span class="hljs-number">2</span>*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-comment">#######################################</span><br>out：[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br>---------------------------------------<br><span class="hljs-comment">#可以使用两层循环迭代生成全排列</span><br><span class="hljs-built_in">print</span>([m + n <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABC&#x27;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;XYZ&#x27;</span>])<br><span class="hljs-comment">#######################################</span><br>out:[<span class="hljs-string">&#x27;AX&#x27;</span>, <span class="hljs-string">&#x27;AY&#x27;</span>, <span class="hljs-string">&#x27;AZ&#x27;</span>, <span class="hljs-string">&#x27;BX&#x27;</span>, <span class="hljs-string">&#x27;BY&#x27;</span>, <span class="hljs-string">&#x27;BZ&#x27;</span>, <span class="hljs-string">&#x27;CX&#x27;</span>, <span class="hljs-string">&#x27;CY&#x27;</span>, <span class="hljs-string">&#x27;CZ&#x27;</span>]<br>---------------------------------------<br><span class="hljs-comment">#基于dict的键值对可以同时迭代</span><br>d = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br>     <span class="hljs-built_in">print</span>(k, <span class="hljs-string">&#x27;=&#x27;</span>, v)<br><span class="hljs-comment">#列表生成器也可以同时迭代</span><br>[k + <span class="hljs-string">&#x27;=&#x27;</span> + v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items()]<br><span class="hljs-comment">#######################################</span><br>out1: x = A<br>  y = B<br>  z = C<br>out2: [<span class="hljs-string">&#x27;x=A&#x27;</span>, <span class="hljs-string">&#x27;y=B&#x27;</span>, <span class="hljs-string">&#x27;z=C&#x27;</span>]<br></code></pre></td></tr></table></figure><p>另外，我们可以使用列表生成器和条件赋值结合在一起使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#条件赋值</span><br>value = <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;dog&#x27;</span><br>value<br><span class="hljs-comment">#######################################</span><br>out ：<span class="hljs-string">&#x27;cat&#x27;</span><br>---------------------------------------<br>L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>[i <span class="hljs-keyword">if</span> i &lt;= <span class="hljs-number">5</span> <span class="hljs-keyword">else</span> <span class="hljs-number">5</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L]<br><span class="hljs-comment">#######################################</span><br>out ：[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]<br>---------------------------------------<br><span class="hljs-comment">#结合使用</span><br>[i*<span class="hljs-number">3</span> <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> i*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L]<br><span class="hljs-comment">#######################################</span><br>out ：[<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">18</span>, <span class="hljs-number">14</span>]<br></code></pre></td></tr></table></figure><h2 id="2高阶函数"><a class="markdownIt-Anchor" href="#2高阶函数"></a> 2.高阶函数</h2><ul><li>在python中我们可以使用匿名函数，可以避免定义，随用随写，且不用考虑函数名冲突的问题</li><li>与def关键字定义的函数相比，不需要名字（lambda是他们的统一关键字，不是名字)，无法调用全局变量</li><li>为了给高阶函数传参，有时创建一次性的小型函数更便利，这便是匿名函数存在的原因</li></ul><h3 id="21关键字lambda"><a class="markdownIt-Anchor" href="#21关键字lambda"></a> 2.1关键字lambda</h3><ul><li>关键字<code>lambda</code>表示匿名函数，使用方法为：<code>lambda arguments:expression(argu1,argu2...)</code></li><li>lambda函数的定义体中不能赋值，也不能使用<code>while</code>和<code>try</code>等<code>python</code>语句</li><li>lambda只是一个语法糖</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将lambda函数赋值给变量a，a具有了功能</span><br>a = <span class="hljs-keyword">lambda</span> x,y : x*y<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-comment">######################################</span><br>out1 :&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x000001B6E26AB048</span>&gt;<br>out2 :<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="22高阶函数map"><a class="markdownIt-Anchor" href="#22高阶函数map"></a> 2.2高阶函数map</h3><blockquote><p>“在 Python 3 中，map 和 filter 返回生成器（一种迭代器），因此现在 它们的直接替代品是生成器表达式（在 Python 2 中，这两个函数返回列表，因此最接近的替代品是列表推导）”                                    《流畅的python》</p></blockquote><ul><li><code>map(function,iterable)</code></li><li><code>map</code>使用<code>function</code>对<code>iterable</code>中的元素进行逐个映射并且返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-keyword">lambda</span> x: x*<span class="hljs-number">2</span><br>L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">map</span>(a,L)          <span class="hljs-comment"># 返回不出列表，返回的是迭代器</span><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(a,L))    <span class="hljs-comment"># 返回出一个列表</span><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-number">2</span>*x, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x, y: <span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&#x27;_&#x27;</span>+y, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcde&#x27;</span>)))<br><span class="hljs-comment">##############################################</span><br>out1 :&lt;<span class="hljs-built_in">map</span> at <span class="hljs-number">0x1b6e26b67c8</span>&gt;<br>out2 :[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>]<br>out3 :[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br>out4 :[<span class="hljs-string">&#x27;0_a&#x27;</span>, <span class="hljs-string">&#x27;1_b&#x27;</span>, <span class="hljs-string">&#x27;2_c&#x27;</span>, <span class="hljs-string">&#x27;3_d&#x27;</span>, <span class="hljs-string">&#x27;4_e&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="23zip函数与enumerate方法"><a class="markdownIt-Anchor" href="#23zip函数与enumerate方法"></a> 2.3Zip函数与enumerate方法</h3><ul><li><p><code>zip</code>函数把多个可迭代的对象打包成一个由元组构成的生成器，元组中的元素来自参数传入的各个可迭代对象</p></li><li><p><code>enumerate</code> 是一种特殊的打包，它可以在迭代时绑定迭代元素的遍历序号</p></li><li><p>循环迭代的时候使用到 <code>zip</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">L1, L2, L3 = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abc&#x27;</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;def&#x27;</span>), <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;hij&#x27;</span>)<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(L1, L2, L3))<br><span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">zip</span>(L1, L2, L3))<br><span class="hljs-keyword">for</span> i, j, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(L1, L2, L3):<br><span class="hljs-built_in">print</span>(i, j, k)<br>L = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>)<br><span class="hljs-comment"># 迭代时绑定迭代元素的遍历序号</span><br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(L):<br>    <span class="hljs-built_in">print</span>(index, value)<br><span class="hljs-comment"># 使用zip的等效做法</span><br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(L)), L):<br><span class="hljs-built_in">print</span>(index, value)<br><span class="hljs-comment"># 解压操作（使用*）</span><br>zipped = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(L1, L2, L3))<br><span class="hljs-built_in">print</span>(zipped)<br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(*zipped)) <span class="hljs-comment"># 三个元组分别对应原来的列表</span><br><span class="hljs-comment">##########################################</span><br>Out1: [(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>)]<br>Out2: ((<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>))<br>Out3: a d h<br>  b e i<br>  c f j<br>Out4: <span class="hljs-number">0</span> a<br>  <span class="hljs-number">1</span> b<br>  <span class="hljs-number">2</span> c<br>  <span class="hljs-number">3</span> d<br>Out5: [(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>)]<br>Out6: [(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>), (<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>)]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础手册（1）</title>
    <link href="/2021/02/11/Basic_python(1)/"/>
    <url>/2021/02/11/Basic_python(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="basic_python1"><a class="markdownIt-Anchor" href="#basic_python1"></a> Basic_Python(1)</h1><h2 id="0pycharm-使用细节"><a class="markdownIt-Anchor" href="#0pycharm-使用细节"></a> 0.Pycharm 使用细节</h2><h3 id="01"><a class="markdownIt-Anchor" href="#01"></a> 0.1</h3><p>File - Editor - File and Code Templates 用于调编程模板,模板示例如下，每次打开新的python文件时都会自动生成</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding = utf-8 -*-</span><br><span class="hljs-comment">#@Time : $&#123;DATE&#125; $&#123;TIME&#125;     %自动获取新建文件时的时间，$的作用</span><br><span class="hljs-comment">#@Author : D-code            %写死作者名</span><br><span class="hljs-comment">#@File : $&#123;NAME&#125;.py          %自动获取当前的文件名</span><br><span class="hljs-comment">#@Software : $&#123;PRODUCT_NAME&#125; %自动获取写代码的软件名称</span><br></code></pre></td></tr></table></figure><h3 id="02"><a class="markdownIt-Anchor" href="#02"></a> 0.2</h3><p>shift + Tab 向前一个缩进； Tab是向后一个缩进; 选中多行后 Ctrl + # 生成多行注释</p><h2 id="1注释"><a class="markdownIt-Anchor" href="#1注释"></a> 1.注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>) <span class="hljs-comment">#这是单行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这是第一行注释</span><br><span class="hljs-string">这是第二行注释</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2格式化输出"><a class="markdownIt-Anchor" href="#2格式化输出"></a> 2.格式化输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;年龄是%d&quot;</span>%age)                               <span class="hljs-comment">#没有逗号，是和C不一样的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我的名字叫做%s， 我的年龄是%d&quot;</span>%(<span class="hljs-string">&quot;D-code&quot;</span>, age))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;AAA&quot;</span>,<span class="hljs-string">&quot;BBB&quot;</span>,<span class="hljs-string">&quot;CCC&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;www&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;com&quot;</span>,sep=<span class="hljs-string">&quot;.&quot;</span>)                <span class="hljs-comment">#爬虫时做链接时用这种方式输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)                             <span class="hljs-comment">#不换行输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;world&quot;</span>,end=<span class="hljs-string">&quot;\t&quot;</span>)                           <span class="hljs-comment">#空格输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python&quot;</span>,end=<span class="hljs-string">&quot;\n&quot;</span>)                          <span class="hljs-comment">#换行输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python&quot;</span>)<br><br>out:<br>    年龄是：<span class="hljs-number">18</span><br>    我的名字叫做D-code， 我的年龄是<span class="hljs-number">18</span><br>    AAA BBB CCC<br>    www.baidu.com<br>    helloworldpython<br>    python<br></code></pre></td></tr></table></figure><h2 id="3输入"><a class="markdownIt-Anchor" href="#3输入"></a> 3.输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码&quot;</span>)  <span class="hljs-comment">#默认是str型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;您的密码是%s&quot;</span>password)   <span class="hljs-comment">#这里输入的密码是123也要按照%s来输出，而不是%d</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br>password = <span class="hljs-built_in">int</span>()              <span class="hljs-comment">#有需求时要强制转换</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入&quot;</span>))       <span class="hljs-comment">#在输入时候就强转</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br><br>out:<br>    请输入密码<span class="hljs-number">123</span><br>    您的密码是<span class="hljs-number">123123</span><br>    &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;</span><br><span class="hljs-class">    请输入333</span><br><span class="hljs-class">    333 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4判断"><a class="markdownIt-Anchor" href="#4判断"></a> 4.判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">90</span><br>b = <span class="hljs-number">88</span><br><span class="hljs-keyword">if</span> b &lt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;under&quot;</span>)<br><span class="hljs-keyword">elif</span> b == a:           <span class="hljs-comment">#elif比较特殊</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;same&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;over&quot;</span>)<br>    <br>out:<br>    under<br></code></pre></td></tr></table></figure><h2 id="5引入"><a class="markdownIt-Anchor" href="#5引入"></a> 5.引入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random                                     <span class="hljs-comment">#引入随机库</span><br><span class="hljs-keyword">from</span> somemodule <span class="hljs-keyword">import</span> function1,function2,etc... <span class="hljs-comment">#从一些模块引入多个函数</span><br><span class="hljs-keyword">from</span> somemodule <span class="hljs-keyword">import</span> \*                         <span class="hljs-comment">#引入该模块的全部函数</span><br>a = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)                           <span class="hljs-comment">#随机生成一个整数,可以是1,2,0，默认闭区间</span><br></code></pre></td></tr></table></figure><h2 id="6循环"><a class="markdownIt-Anchor" href="#6循环"></a> 6.循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot; &quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-comment">#不换行，空格输出</span><br>    <br>out:<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <br>   <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>):    <span class="hljs-comment">#步进值为3</span><br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>):    <span class="hljs-comment">#验证左闭右开</span><br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br>name = <span class="hljs-string">&quot;chengdu&quot;</span> <br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> name:             <span class="hljs-comment">#能输出字符串</span><br>    <span class="hljs-built_in">print</span>(x,<span class="hljs-string">&quot;&quot;</span>,end=<span class="hljs-string">&quot;\t&quot;</span>)<br><br>a = [<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-string">&quot;cc&quot;</span>,<span class="hljs-string">&quot;dd&quot;</span>]  <span class="hljs-comment">#获取列表中的元素</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(i,a[i])<br>    <br>out:<br>    <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span><br>    <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br>    c h e n g d u<br>    <span class="hljs-number">0</span> aa<br>    <span class="hljs-number">1</span> bb<br>    <span class="hljs-number">2</span> cc<br>    <span class="hljs-number">3</span> dd<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当下是第%d次循环&quot;</span>%(i+<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(i)<br>    i += <span class="hljs-number">1</span><br><br>    <br>out:<br>    当下是第<span class="hljs-number">1</span>次循环<br>    <span class="hljs-number">0</span><br>    当下是第<span class="hljs-number">2</span>次循环<br>    <span class="hljs-number">1</span><br>    当下是第<span class="hljs-number">3</span>次循环<br><span class="hljs-number">2</span><br>当下是第<span class="hljs-number">4</span>次循环<br><span class="hljs-number">3</span><br>当下是第<span class="hljs-number">5</span>次循环<br><span class="hljs-number">4</span> <br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count&lt;<span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;小于5&quot;</span>)<br>    count += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(count,<span class="hljs-string">&quot;大于或等于5&quot;</span>)<br>    <br>out:<br>    <span class="hljs-number">0</span> 小于<span class="hljs-number">5</span><br>    <span class="hljs-number">1</span> 小于<span class="hljs-number">5</span><br>    <span class="hljs-number">2</span> 小于<span class="hljs-number">5</span><br>    <span class="hljs-number">3</span> 小于<span class="hljs-number">5</span><br>    <span class="hljs-number">4</span> 小于<span class="hljs-number">5</span><br>    <span class="hljs-number">5</span> 大于或等于<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">break</span>      <span class="hljs-comment">#跳出for或while循环体</span><br><span class="hljs-keyword">continue</span>   <span class="hljs-comment">#跳过当次循环，进入下一轮循环</span><br><span class="hljs-keyword">pass</span>       <span class="hljs-comment">#占位空语句，不作任何事情</span><br></code></pre></td></tr></table></figure><h2 id="7字符串"><a class="markdownIt-Anchor" href="#7字符串"></a> 7.字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&#x27;字符串&#x27;</span><br>sentence = <span class="hljs-string">&quot;这是一个句子&quot;</span><br>paragraph = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        这是一个段落</span><br><span class="hljs-string">        有好多行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>my_str = <span class="hljs-string">&#x27;I\&#x27;m a student&#x27;</span>       <span class="hljs-comment">#用转义字符避免报错</span><br><span class="hljs-built_in">print</span>(my_str)<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;tianjin&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">7</span>:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[:<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">5</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&quot;,你好&quot;</span>)             <span class="hljs-comment">#字符串连接，使用+</span><br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">str</span>+<span class="hljs-string">&quot; &quot;</span>) * <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;hello\ntianjin&quot;</span>)        <span class="hljs-comment">#r或R可以取消转义功能</span><br><br>out:<br>    I<span class="hljs-string">&#x27;m a student</span><br><span class="hljs-string">    tianjin</span><br><span class="hljs-string">tianji</span><br><span class="hljs-string">tajn</span><br><span class="hljs-string">    tianj</span><br><span class="hljs-string">in</span><br><span class="hljs-string">tianjin,你好</span><br><span class="hljs-string">tianjin tianjin tianjin</span><br><span class="hljs-string">    hello\ntianjin</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字符串常见操作</span><br>isalnum()<br>isalpha()<br>isdigit()<br>isnumeric()<br>join(sep)<br><span class="hljs-built_in">len</span>(string)<br>lstrip()<br>rstrip()<br>split(<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;&quot;</span>,num=string.count(<span class="hljs-built_in">str</span>) num=string.count(<span class="hljs-built_in">str</span>))<br><span class="hljs-built_in">bytes</span>.decode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>,errors=<span class="hljs-string">&quot;strict&quot;</span>)<br>encode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>,errors=strict)<br></code></pre></td></tr></table></figure><h2 id="8列表list"><a class="markdownIt-Anchor" href="#8列表list"></a> 8.列表(List)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">nulllist = []                      <span class="hljs-comment">#定义一个空列表</span><br>list_1 = [<span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">334</span>, <span class="hljs-number">4.6</span>]        <span class="hljs-comment">#列表可以储存不同数据类型的数据</span><br>list_2 = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>,]<br><br><span class="hljs-built_in">print</span>(list_1[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(list_1[-<span class="hljs-number">1</span>]))<br><br><span class="hljs-built_in">print</span>(list_1[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(list_1[<span class="hljs-number">0</span>]))<br><br><span class="hljs-built_in">print</span>(list_2)<br><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> list_2:<br>    <span class="hljs-built_in">print</span>(name)<br>    <br>a = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br><span class="hljs-built_in">print</span>(a.index(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>))            <span class="hljs-comment">#在1-4的范围（左闭右开）内查找&quot;a&quot;并返回下标，如果有多个，返回第一个</span><br>    <br>out:<br>    <span class="hljs-number">4.6</span><br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">float</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">abcd</span></span><br><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><br><span class="hljs-class">[&#x27;张三&#x27;, &#x27;李四&#x27;]</span><br><span class="hljs-class">张三</span><br><span class="hljs-class">李四</span><br><span class="hljs-class">    3</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/xlJ6avE3M57mSOe.png" alt="image-20210109154946643" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a.sort()               <span class="hljs-comment">#升序排序</span><br>a.sort(reverse=<span class="hljs-literal">True</span>)   <span class="hljs-comment">#降序排序</span><br>b = [[],[],[]]         <span class="hljs-comment">#二维列表</span><br></code></pre></td></tr></table></figure><h2 id="9元组tuple"><a class="markdownIt-Anchor" href="#9元组tuple"></a> 9.元组（tuple）</h2><ul><li><p>tuple与list类似，但是tuple里的元素不能进行修改，但可以包含可变对象，比如list</p></li><li><p>定义只有一个元素的tuple也要加逗号</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = ()<br>tup2 = (<span class="hljs-number">55</span>)<br>tup3 = (<span class="hljs-number">55</span>,)<br>tup4 = (<span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tup1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tup2))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tup3))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tup4))<br><br>out:<br>    &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = tup2 + tup4     <span class="hljs-comment">#报错，因为tup2和tup4类型不同</span><br><span class="hljs-built_in">print</span>(tup1)<br>tup1 = tup3 + tup4<br><span class="hljs-built_in">print</span>(tup1)            <span class="hljs-comment">#同类型，成功</span><br><br>a = tup4.count(<span class="hljs-number">66</span>)     <span class="hljs-comment">#统计tup4里的66出现频率</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h2 id="10字典dict"><a class="markdownIt-Anchor" href="#10字典dict"></a> 10.字典（dict）</h2><ul><li><p>字典是无序的对象集合，使用键值对（key-value）存储，具有极快的查找速度</p></li><li><p>key必须使用不可变类型</p></li><li><p>同一个字典中，key必须是唯一的</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">info = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;       <span class="hljs-comment">#新建字典info</span><br><span class="hljs-built_in">print</span>(info[<span class="hljs-string">&quot;age&quot;</span>])<br><span class="hljs-built_in">print</span>(info.get(<span class="hljs-string">&quot;gender&quot;</span>))              <span class="hljs-comment">#用get方法，避免报错，返回none，增加健壮性</span><br><span class="hljs-built_in">print</span>(info.get(<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&#x27;没找到&#x27;</span>))      <span class="hljs-comment">#查无则返回“没找到”</span><br><span class="hljs-built_in">print</span>(info.keys())    <span class="hljs-comment"># 输出dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span><br><span class="hljs-built_in">print</span>(info.values())   <span class="hljs-comment"># 输出dict_values([&#x27;Peter&#x27;, 18])</span><br><span class="hljs-built_in">print</span>(info.items())   <span class="hljs-comment"># 输出dict_items([(&#x27;name&#x27;, &#x27;Peter&#x27;), (&#x27;age&#x27;, 18)])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#增</span><br>info = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>newID = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入学号&quot;</span>)<br>info[<span class="hljs-string">&quot;id&quot;</span>] = newID<br><span class="hljs-built_in">print</span>(info[<span class="hljs-string">&quot;id&quot;</span>])<br><span class="hljs-built_in">print</span>(info.items())<br><br>out:<br>    输入学号<span class="hljs-number">321</span><br>    <span class="hljs-number">321</span><br>    dict_items([(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Peter&#x27;</span>), (<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">18</span>), (<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;321&#x27;</span>)])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#删</span><br>info = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前： %s&quot;</span>%info[<span class="hljs-string">&quot;name&quot;</span>])<br><span class="hljs-keyword">del</span> info[<span class="hljs-string">&quot;name&quot;</span>]<br><span class="hljs-built_in">print</span>(info.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&#x27;null&#x27;</span>))<br><span class="hljs-keyword">del</span> info                         <span class="hljs-comment">#直接删除了字典info，print后会报错</span><br>info.clear()                     <span class="hljs-comment">#清空后返回空字典&#123;&#125;</span><br><br>out:<br>    删除前： Peter<br>    null<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#改</span><br>info[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查，分为查键与查值</span><br><span class="hljs-built_in">print</span>(info.keys())    <br><span class="hljs-comment"># 输出dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])，这里是列表形式</span><br><span class="hljs-built_in">print</span>(info.values())   <br><span class="hljs-comment"># 输出dict_values([&#x27;Peter&#x27;, 18])</span><br><span class="hljs-built_in">print</span>(info.items())   <br><span class="hljs-comment"># 输出dict_items([(&#x27;name&#x27;, &#x27;Peter&#x27;), (&#x27;age&#x27;, 18)])</span><br><span class="hljs-comment"># 得到的是列表，列表里有元组，可以操作查询具体的了</span><br><br>info = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-comment">#遍历所有的键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> info.keys():<br>    <span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># 遍历所有的值</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> info.values():<br>    <span class="hljs-built_in">print</span>(value)<br><span class="hljs-comment">#同时遍历</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> info.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key=%s, value=%s&quot;</span>%(key,value))<br>    <br>    <br>out:<br>    name<br>    age<br>    Peter<br><span class="hljs-number">18</span><br>    key=name, value=Peter<br>    key=age, value=<span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>参照一下字典的思想，解决一下for循环中同时获取index与value的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用枚举函数，同时拿到列表中的下标和元素内容</span><br>mylist = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">enumerate</span>(mylist))<br><br><span class="hljs-keyword">for</span> i,x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mylist):<br>    <span class="hljs-built_in">print</span>(i,x)<br>    <br>out:<br>&lt;<span class="hljs-built_in">enumerate</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000203F0F23E08</span>&gt;<br><span class="hljs-number">0</span> a<br><span class="hljs-number">1</span> b<br><span class="hljs-number">2</span> c<br><span class="hljs-number">3</span> d<br></code></pre></td></tr></table></figure><h2 id="11集合set"><a class="markdownIt-Anchor" href="#11集合set"></a> 11.集合(set)</h2><ul><li><p>set与dict类似，也是一组key的集合，但是不存储value。由于key不能重复，所以set中无重复值，可以用来去重复</p></li><li><p>set是无序的，重复元素在set中被自动过滤</p></li></ul><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p><img src="https://i.loli.net/2021/01/10/s9SQGhvMPTNVqHw.png" alt="image-20210110003138984" /></p><h2 id="12函数function"><a class="markdownIt-Anchor" href="#12函数function"></a> 12.函数（Function）</h2><p>Python中函数可以直接返回多个值，函数中的局部变量用global来声明即可改变全局变量</p><h2 id="13文件操作"><a class="markdownIt-Anchor" href="#13文件操作"></a> 13.文件操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)    <span class="hljs-comment">#打开文件，write模式，不存在文件时会自动创建</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)    <span class="hljs-comment">#打开文件，read模式，不存在文件时会报错</span><br>f.close()                    <span class="hljs-comment">#关闭文件</span><br><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)    <span class="hljs-comment">#打开文件，write模式</span><br>f.write(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.read(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(content)               <span class="hljs-comment">#得到“Hello”</span><br>content = f.read(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(content)               <span class="hljs-comment">#得到“ worl”，说明指针不再是指向文件开始处了</span><br>f.close()                    <span class="hljs-comment">#关闭文件</span><br> <br>f.readline()                 <span class="hljs-comment">#读文件，一次读取一行</span><br>f.readlines()                <span class="hljs-comment">#读文件，一次读取所有行</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text1.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;python文件操作&quot;</span>)<br><span class="hljs-comment"># 使用with语句读取文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text1.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">print</span>(f.read())<br><br><span class="hljs-keyword">import</span> os<br>os.rename(<span class="hljs-string">&quot;text.txt&quot;</span>,<span class="hljs-string">&quot;text0.txt&quot;</span>)<span class="hljs-comment"># 文件重命名</span><br>os.remove(<span class="hljs-string">&quot;text1.txt&quot;</span>)<span class="hljs-comment"># 删除文件</span><br></code></pre></td></tr></table></figure><h2 id="14异常处理"><a class="markdownIt-Anchor" href="#14异常处理"></a> 14.异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input()：用于接收输入。</span><br><br>score = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的分数&quot;</span>)<span class="hljs-comment"># input函数接收输入，为字符串类型</span><br>score = <span class="hljs-built_in">float</span>(score)<span class="hljs-comment"># 将分数转化为数字类型</span><br><br><span class="hljs-comment"># try:… except Exception:… 是Python中用于捕获异常的语句，如果try中的语句出现错误，则会执行except中的语句。</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span>&gt;=score&gt;=<span class="hljs-number">90</span>:<span class="hljs-comment"># 判断输入的值是否大于等级分数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;优&quot;</span>)   <span class="hljs-comment"># 满足条件后输出等级</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">90</span> &gt; score &gt;= <span class="hljs-number">80</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;良&quot;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">80</span>&gt;score&gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差&quot;</span>)<br><span class="hljs-keyword">except</span> Exception:                                  <span class="hljs-comment">#这种是捕获所有异常</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的分数&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test1&quot;</span>)<br><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)             <span class="hljs-comment">#不存在该文件，报错，文件没找到属于IO异常</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test2&quot;</span>)                         <span class="hljs-comment">#异常，不会被执行</span><br><br><span class="hljs-keyword">except</span> IOError:                            <span class="hljs-comment">#如果是IO类型的报错，就pass，所以结果没报错</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result：               <span class="hljs-comment">#用as，将报错输出，但不是红色那种</span><br><span class="hljs-built_in">print</span>(result)<br>out:<br>    test1<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)                   <span class="hljs-comment">#当不存在123.txt文件时</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            content = f.readline()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            time.sleep(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(content)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件关闭&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常&quot;</span>)<br>    <br>out:<br>    发生异常<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)                <span class="hljs-comment">#存在test.txt文件时</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            content = f.readline()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            time.sleep(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(content,end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件关闭&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常&quot;</span>)<br>    <br>out:<br>    Hello world!<br>Hello world!<br>Hello world!<br>Hello world!<br>Hello world!<br>Hello world!<br>Hello world!<br>Hello world!<br><br>文件关闭<br>    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Windows环境下安装Linux虚拟机</title>
    <link href="/2021/01/10/%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux/"/>
    <url>/2021/01/10/%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux/</url>
    
    <content type="html"><![CDATA[<h2 id="1下载ubuntu镜像文件与vmware"><a class="markdownIt-Anchor" href="#1下载ubuntu镜像文件与vmware"></a> 1.下载Ubuntu镜像文件与VMware</h2><p>本次安装是使用Linux的常用发行版本Ubuntu，并且使用VMware15Pro建立虚拟机进行安装</p><blockquote><p>Linux版本：ubuntu-20.04.2.0-desktop-amd64.iso</p><p>下载地址：<a href="http://www.ubuntu.com">http://www.ubuntu.com</a></p></blockquote><blockquote><p>VM版本：VMware Workstation 15 Pro</p><p>下载地址:  baidupan</p></blockquote><h2 id="2使用虚拟机安装ubuntu"><a class="markdownIt-Anchor" href="#2使用虚拟机安装ubuntu"></a> 2.使用虚拟机安装Ubuntu</h2><p><code>新建虚拟机</code>–&gt;<code>自定义</code>–&gt;<code>下一步</code>–&gt;<code>稍后安装操作系统</code>–&gt;<code>选择linux-以及Ubuntu64位</code>–&gt;<code>选择提前建好的文件夹作</code></p><p><code>为安装位置</code>–&gt;<code>设置参数按需求设置</code>–&gt;<code>将虚拟磁盘存储为单个文件</code>–&gt;<code>自定义硬件</code>–&gt;</p><p><code>点击“新CD···”选择我们之前下载的Ubuntu镜像</code>–&gt;<code>完成</code>–&gt;<code>开启虚拟机</code>–&gt;<code>左侧选择语言简体中文</code>–&gt;</p><p><code>右侧选择安装</code>–&gt;<code>提示清除磁盘仍选现在安装</code>–&gt;<code>继续</code>–&gt;<code>位置设置上海</code>–&gt;<code>设置用户名密码</code>–&gt;<code>安装后重启</code></p><h2 id="3重启电脑后打开虚拟机直接蓝屏"><a class="markdownIt-Anchor" href="#3重启电脑后打开虚拟机直接蓝屏"></a> 3.重启电脑后，打开虚拟机，直接蓝屏</h2><ul><li>解决方案1：<ul><li>windows搜索：<code>启用或关闭windows功能</code></li><li>将<code>windows虚拟机监控平台</code>前面打勾</li><li>将<code>虚拟机平台</code>前面打勾</li><li>重启计算机即可</li></ul></li><li>解决方案2：<ul><li>在虚拟机设置里，把声卡、USB、打印机移除掉</li></ul></li></ul><h2 id="4启动虚拟机报错"><a class="markdownIt-Anchor" href="#4启动虚拟机报错"></a> 4.启动虚拟机报错</h2><blockquote><p>VMware WorkStation 与 Device/Credential Guard不兼容，在禁用Device/Credential Guard后，可以运行···</p></blockquote><ul><li>解决方案：<ul><li>禁用Hyper-V服务<code>Win+R</code>–&gt;<code>services.msc</code>，找到Hyper-V服务并禁用</li><li>管理员身份运行powershell，<code>Win+R</code>–&gt;<code>powershell</code>–&gt;<code>Start-process powershell -Verb runAs</code></li><li>输入<code>bcdedit /set hypervisorlaunchtype off</code>–&gt;<code>是</code></li><li>重启计算机，运行虚拟机</li></ul></li></ul><p><img src="https://i.loli.net/2021/03/21/pogDAw7GRrv1XKU.png" alt="image-20210321164704431" /></p><p><img src="https://i.loli.net/2021/03/21/JlA4KhDidPwf3zv.png" alt="image-20210321164911649" /></p><h2 id="5linux换源"><a class="markdownIt-Anchor" href="#5linux换源"></a> 5.Linux换源</h2><ul><li>备份初始源，以防丢失</li></ul><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources_init.list</code></p><ul><li>打开源列表</li></ul><p><code>sudo gedit /etc/apt/sources.list</code></p><ul><li>将源列表内容换成清华源</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs html">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse <br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse <br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse <br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse <br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse <br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse <br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse <br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br></code></pre></td></tr></table></figure><ul><li>更新源</li></ul><p><code>sudo apt-get update</code></p><p><code>sudo apt-get upgrade</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
